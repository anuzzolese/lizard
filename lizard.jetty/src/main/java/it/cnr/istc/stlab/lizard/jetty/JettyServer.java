package it.cnr.istc.stlab.lizard.jetty;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.apache.commons.cli.Option.Builder;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.servlet.ServletHolder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import it.cnr.istc.stlab.lizard.commons.jena.RuntimeJenaLizardContext;
import it.cnr.istc.stlab.lizard.commons.web.RestImpl;
import it.cnr.istc.stlab.lizard.jetty.utils.FileUtils;

public class JettyServer {

	private static Logger logger = LoggerFactory.getLogger(JettyServer.class);

	public final static String CONFIGURATION_FILE = "c";
	public final static String CONFIGURATION_FILE_LONG = "config";

	public final static String PROJECT_FOLDER = "pf";
	public final static String PROJECT_FOLDER_LONG = "project-folder";

	public final static String PORT = "p";
	public final static String PORT_LONG = "port";

	public static void main(String[] args) {

		logger.trace("Starting server");

		Options options = new Options();

		Builder optionBuilder = Option.builder(CONFIGURATION_FILE);
		Option configurationFileOption = optionBuilder.argName("file").hasArg().required(true).desc("MANDATORY - Input file containing the configuration.").longOpt(CONFIGURATION_FILE_LONG).build();
		options.addOption(configurationFileOption);

		{
			optionBuilder = Option.builder(PROJECT_FOLDER);
			Option outputFileOption = optionBuilder.argName("folder").hasArg().required(true).desc("MANDATORY - Path to the directory containing the project generated by Lizard.").longOpt(PROJECT_FOLDER_LONG).build();
			options.addOption(outputFileOption);
		}

		{
			optionBuilder = Option.builder(PORT);
			Option outputFileOption = optionBuilder.argName("port").hasArg().required(true).desc("MANDATORY - The server where the server will be deployed.").longOpt(PORT_LONG).build();
			options.addOption(outputFileOption);
		}

		CommandLine commandLine = null;

		CommandLineParser cmdLineParser = new DefaultParser();
		try {
			commandLine = cmdLineParser.parse(options, args);
		} catch (ParseException e) {
			HelpFormatter formatter = new HelpFormatter();
			formatter.printHelp("process", options);
		}
		int port;
		if (commandLine != null) {

			String configuration = commandLine.getOptionValue(CONFIGURATION_FILE);
			RuntimeJenaLizardContext.setConfigurationFilePath(configuration);
			String projectFolder = commandLine.getOptionValue(PROJECT_FOLDER);
			RuntimeJenaLizardContext.getContext().getConf().setOntologies_file(projectFolder + "/ontologies");
			RuntimeJenaLizardContext.getContext().getConf().setSwaggerApiDescriptionFolder(projectFolder + "/swagger");
			System.out.println("Print configuration " + RuntimeJenaLizardContext.getContext().getConf().toString());
			port = Integer.valueOf(commandLine.getOptionValue(PORT));

			// Jetty server
			Server jettyServer = new Server(port);

			// Main context handler
			ServletContextHandler servletContextHandler = new ServletContextHandler(ServletContextHandler.SESSIONS);
			servletContextHandler.setContextPath("/");

			// Lizard servlets
			ServletHolder servletHolder = servletContextHandler.addServlet(org.glassfish.jersey.servlet.ServletContainer.class, "/*");
			servletHolder.setInitOrder(1);
			servletHolder.setInitParameter("jersey.config.server.provider.packages", FileUtils.getNamePackage(RestImpl.class));
			servletHolder.setInitParameter("jersey.config.server.wadl.disableWadl", "true");
			servletHolder.setInitParameter("jersey.config.server.provider.classnames", "org.glassfish.jersey.jackson.JacksonFeature");

			System.out.println("Lizard service will be available at " + "http://localhost:" + port + "/*");

			// add main context to Jetty
			jettyServer.setHandler(servletContextHandler);

			try {
				jettyServer.start();
				System.out.println("Done! Jetty Server is up and running!");
				jettyServer.join();
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					jettyServer.destroy();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
	}

}
